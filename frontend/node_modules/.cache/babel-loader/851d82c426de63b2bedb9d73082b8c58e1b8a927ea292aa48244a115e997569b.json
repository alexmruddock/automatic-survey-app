{"ast":null,"code":"var _jsxFileName = \"/workspaces/automatic-survey-app/frontend/src/CreateSurvey.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport authenticatedFetch from \"./authenticatedFetch\";\nimport BackButton from \"./BackButton\";\nimport SurveyForm from \"./SurveyForm\";\nimport SurveyDisplay from \"./SurveyDisplay\";\nimport { generateSurvey } from \"./generateSurvey\";\nimport { generateSurveyImage } from \"./generateSurveyImage\";\nimport { saveSurvey } from \"./saveSurvey\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CreateSurvey() {\n  _s();\n  const [survey, setSurvey] = useState(null);\n  const [imageUrl, setImageUrl] = useState(null);\n  const [imageUrlAWS, setImageUrlAWS] = useState(null); // [1]\n  const [segments, setSegments] = useState([]); // For storing available segments\n  const [selectedSegments, setSelectedSegments] = useState([]); // For storing selected segment IDs\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Fetch segments when the component mounts\n    authenticatedFetch(\"https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/segments\").then(response => response.json()).then(data => setSegments(data)).catch(error => console.error(\"Error fetching segments:\", error));\n  }, []);\n  const handleGenerate = async surveyData => {\n    console.log(\"Received survey data: \", surveyData);\n    const title = surveyData.title;\n    const description = surveyData.description;\n    try {\n      const generatedSurvey = await generateSurvey(description);\n      setSurvey(generatedSurvey);\n      const generatedImageUrl = await generateSurveyImage(title, description);\n      setImageUrl(generatedImageUrl);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n  const handleSegmentChange = selected => {\n    setSelectedSegments(selected); // Update the state with selected segment IDs\n  };\n\n  const handleSave = async () => {\n    try {\n      // Include selectedSegments in the survey data\n      const surveyDataWithSegments = {\n        ...survey,\n        segments: selectedSegments\n      };\n      const savedData = await saveSurvey(surveyDataWithSegments);\n      console.log(\"Saved Survey: \", savedData);\n\n      // provide user feedback and redirect\n      alert(\"Survey saved successfully!\");\n      navigate(\"/\");\n    } catch (error) {\n      console.error(error.message);\n      alert(\"Error saving survey!\");\n    }\n  };\n  const handleOpenImage = () => {\n    if (imageUrl) {\n      window.open(imageUrl, \"_blank\"); // Open the image URL in a new tab\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(BackButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SurveyForm, {\n      onSubmit: handleGenerate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SurveyDisplay, {\n      survey: survey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SelectSegments, {\n      segments: segments,\n      onSegmentChange: handleSegmentChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), survey && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        className: \"mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n        children: \"Save Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), imageUrl && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleOpenImage,\n        className: \"mt-4 ml-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n        children: \"View Generated Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n// Component for segment selection\n_s(CreateSurvey, \"lIqQ57zRqrb/QkmKzCRkfuR6JeE=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateSurvey;\nfunction SelectSegments({\n  segments,\n  onSegmentChange\n}) {\n  const handleSelectionChange = e => {\n    const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);\n    onSegmentChange(selectedOptions);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"segments\",\n      children: \"Select Segments:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      multiple: true,\n      id: \"segments\",\n      onChange: handleSelectionChange,\n      className: \"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500\",\n      children: segments.map(segment => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: segment._id,\n        children: segment.name\n      }, segment._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_c2 = SelectSegments;\nexport default CreateSurvey;\nvar _c, _c2;\n$RefreshReg$(_c, \"CreateSurvey\");\n$RefreshReg$(_c2, \"SelectSegments\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","authenticatedFetch","BackButton","SurveyForm","SurveyDisplay","generateSurvey","generateSurveyImage","saveSurvey","jsxDEV","_jsxDEV","Fragment","_Fragment","CreateSurvey","_s","survey","setSurvey","imageUrl","setImageUrl","imageUrlAWS","setImageUrlAWS","segments","setSegments","selectedSegments","setSelectedSegments","navigate","then","response","json","data","catch","error","console","handleGenerate","surveyData","log","title","description","generatedSurvey","generatedImageUrl","message","handleSegmentChange","selected","handleSave","surveyDataWithSegments","savedData","alert","handleOpenImage","window","open","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","className","SelectSegments","onSegmentChange","onClick","_c","handleSelectionChange","e","selectedOptions","Array","from","target","option","value","htmlFor","multiple","id","onChange","map","segment","_id","name","_c2","$RefreshReg$"],"sources":["/workspaces/automatic-survey-app/frontend/src/CreateSurvey.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport authenticatedFetch from \"./authenticatedFetch\";\nimport BackButton from \"./BackButton\";\nimport SurveyForm from \"./SurveyForm\";\nimport SurveyDisplay from \"./SurveyDisplay\";\nimport { generateSurvey } from \"./generateSurvey\";\nimport { generateSurveyImage } from \"./generateSurveyImage\";\nimport { saveSurvey } from \"./saveSurvey\";\n\nfunction CreateSurvey() {\n  const [survey, setSurvey] = useState(null);\n  const [imageUrl, setImageUrl] = useState(null);\n  const [imageUrlAWS, setImageUrlAWS] = useState(null); // [1]\n  const [segments, setSegments] = useState([]); // For storing available segments\n  const [selectedSegments, setSelectedSegments] = useState([]); // For storing selected segment IDs\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Fetch segments when the component mounts\n    authenticatedFetch(\n      \"https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/segments\"\n    )\n      .then((response) => response.json())\n      .then((data) => setSegments(data))\n      .catch((error) => console.error(\"Error fetching segments:\", error));\n  }, []);\n\n  const handleGenerate = async (surveyData) => {\n    console.log(\"Received survey data: \", surveyData);\n    const title = surveyData.title;\n    const description = surveyData.description;\n    try {\n      const generatedSurvey = await generateSurvey(description);\n      setSurvey(generatedSurvey);\n      const generatedImageUrl = await generateSurveyImage( title, description );\n      setImageUrl(generatedImageUrl);\n      \n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const handleSegmentChange = (selected) => {\n    setSelectedSegments(selected); // Update the state with selected segment IDs\n  };\n\n  const handleSave = async () => {\n    try {\n      // Include selectedSegments in the survey data\n      const surveyDataWithSegments = { ...survey, segments: selectedSegments };\n      const savedData = await saveSurvey(surveyDataWithSegments);\n      console.log(\"Saved Survey: \", savedData);\n\n      // provide user feedback and redirect\n      alert(\"Survey saved successfully!\");\n      navigate(\"/\");\n    } catch (error) {\n      console.error(error.message);\n      alert(\"Error saving survey!\");\n    }\n  };\n\n  const handleOpenImage = () => {\n    if (imageUrl) {\n      window.open(imageUrl, \"_blank\"); // Open the image URL in a new tab\n    }\n  };\n\n  return (\n    <div>\n      <BackButton />\n      <SurveyForm onSubmit={handleGenerate} />\n      <div className=\"h-8\"></div>\n      <SurveyDisplay survey={survey} />\n      <SelectSegments\n        segments={segments}\n        onSegmentChange={handleSegmentChange}\n      />\n      {survey && (\n        <>\n          <button\n            onClick={handleSave}\n            className=\"mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n          >\n            Save Survey\n          </button>\n          {imageUrl && (\n            <button\n              onClick={handleOpenImage}\n              className=\"mt-4 ml-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            >\n              View Generated Image\n            </button>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\n// Component for segment selection\nfunction SelectSegments({ segments, onSegmentChange }) {\n  const handleSelectionChange = (e) => {\n    const selectedOptions = Array.from(\n      e.target.selectedOptions,\n      (option) => option.value\n    );\n    onSegmentChange(selectedOptions);\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"segments\">Select Segments:</label>\n      <select\n        multiple\n        id=\"segments\"\n        onChange={handleSelectionChange}\n        className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\n      >\n        {segments.map((segment) => (\n          <option key={segment._id} value={segment._id}>\n            {segment.name}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n\nexport default CreateSurvey;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}