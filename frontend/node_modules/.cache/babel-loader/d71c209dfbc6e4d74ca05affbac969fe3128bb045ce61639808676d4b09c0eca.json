{"ast":null,"code":"var _jsxFileName = \"/workspaces/automatic-survey-app/frontend/src/EditSurvey.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport SurveyForm from \"./SurveyForm\"; // Reusable component for both creating and editing surveys\nimport authenticatedFetch from \"./authenticatedFetch\"; // Assuming this is your custom fetch function with authentication\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditSurvey() {\n  _s();\n  const {\n    surveyId\n  } = useParams();\n  const [surveyData, setSurveyData] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetchSurveyData(surveyId).then(data => setSurveyData(data));\n  }, [surveyId]);\n  const handleSurveySubmit = async editedData => {\n    try {\n      const response = await updateSurvey(surveyId, editedData);\n      if (response.ok) {\n        alert('Survey updated successfully.');\n        navigate(\"/manage-surveys\"); // Redirect after successful submission\n      } else {\n        alert('Failed to update survey.');\n      }\n    } catch (error) {\n      console.error('Error updating survey:', error);\n      alert('Error updating survey.');\n    }\n  };\n  if (!surveyData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading survey data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Survey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SurveyForm, {\n      initialData: surveyData,\n      onSubmit: handleSurveySubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(EditSurvey, \"Bm+I8m2ICFkfwQVZ/bX7oi2a69o=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditSurvey;\nasync function fetchSurveyData(surveyId) {\n  const response = await authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/surveys/${surveyId}`);\n  if (!response.ok) {\n    throw new Error('Error fetching survey data');\n  }\n  return response.json();\n}\nasync function updateSurvey(surveyId, editedData) {\n  return authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/update-survey/${surveyId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(editedData)\n  });\n}\nexport default EditSurvey;\nvar _c;\n$RefreshReg$(_c, \"EditSurvey\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","SurveyForm","authenticatedFetch","jsxDEV","_jsxDEV","EditSurvey","_s","surveyId","surveyData","setSurveyData","navigate","fetchSurveyData","then","data","handleSurveySubmit","editedData","response","updateSurvey","ok","alert","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","initialData","onSubmit","_c","Error","json","method","headers","body","JSON","stringify","$RefreshReg$"],"sources":["/workspaces/automatic-survey-app/frontend/src/EditSurvey.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport SurveyForm from \"./SurveyForm\"; // Reusable component for both creating and editing surveys\nimport authenticatedFetch from \"./authenticatedFetch\"; // Assuming this is your custom fetch function with authentication\n\nfunction EditSurvey() {\n  const { surveyId } = useParams();\n  const [surveyData, setSurveyData] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchSurveyData(surveyId).then(data => setSurveyData(data));\n  }, [surveyId]);\n\n  const handleSurveySubmit = async (editedData) => {\n    try {\n      const response = await updateSurvey(surveyId, editedData);\n      if (response.ok) {\n        alert('Survey updated successfully.');\n        navigate(\"/manage-surveys\"); // Redirect after successful submission\n      } else {\n        alert('Failed to update survey.');\n      }\n    } catch (error) {\n      console.error('Error updating survey:', error);\n      alert('Error updating survey.');\n    }\n  };\n\n  if (!surveyData) {\n    return <p>Loading survey data...</p>;\n  }\n\n  return (\n    <div>\n      <h2>Edit Survey</h2>\n      <SurveyForm initialData={surveyData} onSubmit={handleSurveySubmit} />\n    </div>\n  );\n}\n\nasync function fetchSurveyData(surveyId) {\n  const response = await authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/surveys/${surveyId}`);\n  if (!response.ok) {\n    throw new Error('Error fetching survey data');\n  }\n  return response.json();\n}\n\nasync function updateSurvey(surveyId, editedData) {\n  return authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/update-survey/${surveyId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(editedData)\n  });\n}\n\nexport default EditSurvey;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,UAAU,MAAM,cAAc,CAAC,CAAC;AACvC,OAAOC,kBAAkB,MAAM,sBAAsB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAS,CAAC,GAAGR,SAAS,CAAC,CAAC;EAChC,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAMa,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACda,eAAe,CAACJ,QAAQ,CAAC,CAACK,IAAI,CAACC,IAAI,IAAIJ,aAAa,CAACI,IAAI,CAAC,CAAC;EAC7D,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;EAEd,MAAMO,kBAAkB,GAAG,MAAOC,UAAU,IAAK;IAC/C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,YAAY,CAACV,QAAQ,EAAEQ,UAAU,CAAC;MACzD,IAAIC,QAAQ,CAACE,EAAE,EAAE;QACfC,KAAK,CAAC,8BAA8B,CAAC;QACrCT,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;MAC/B,CAAC,MAAM;QACLS,KAAK,CAAC,0BAA0B,CAAC;MACnC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CD,KAAK,CAAC,wBAAwB,CAAC;IACjC;EACF,CAAC;EAED,IAAI,CAACX,UAAU,EAAE;IACf,oBAAOJ,OAAA;MAAAkB,QAAA,EAAG;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACtC;EAEA,oBACEtB,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBtB,OAAA,CAACH,UAAU;MAAC0B,WAAW,EAAEnB,UAAW;MAACoB,QAAQ,EAAEd;IAAmB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClE,CAAC;AAEV;AAACpB,EAAA,CAlCQD,UAAU;EAAA,QACIN,SAAS,EAEbC,WAAW;AAAA;AAAA6B,EAAA,GAHrBxB,UAAU;AAoCnB,eAAeM,eAAeA,CAACJ,QAAQ,EAAE;EACvC,MAAMS,QAAQ,GAAG,MAAMd,kBAAkB,CAAE,uEAAsEK,QAAS,EAAC,CAAC;EAC5H,IAAI,CAACS,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIY,KAAK,CAAC,4BAA4B,CAAC;EAC/C;EACA,OAAOd,QAAQ,CAACe,IAAI,CAAC,CAAC;AACxB;AAEA,eAAed,YAAYA,CAACV,QAAQ,EAAEQ,UAAU,EAAE;EAChD,OAAOb,kBAAkB,CAAE,6EAA4EK,QAAS,EAAC,EAAE;IACjHyB,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACrB,UAAU;EACjC,CAAC,CAAC;AACJ;AAEA,eAAeV,UAAU;AAAC,IAAAwB,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}