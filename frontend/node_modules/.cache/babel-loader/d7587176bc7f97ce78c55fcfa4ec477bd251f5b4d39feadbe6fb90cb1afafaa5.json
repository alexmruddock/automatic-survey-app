{"ast":null,"code":"var _jsxFileName = \"/workspaces/automatic-survey-app/frontend/src/SurveyVisualizations.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport MyBarChart from \"./MyBarChart\";\nimport MyHistogram from \"./MyHistogram\";\nimport authenticatedFetch from \"./authenticatedFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SurveyVisualizations() {\n  _s();\n  const [visualizationData, setVisualizationData] = useState([]);\n  const {\n    surveyId\n  } = useParams();\n  useEffect(() => {\n    Promise.all([authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/survey-responses/${surveyId}/visualize`), authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/retrieve-survey/${surveyId}`)]).then(async ([response1, response2]) => {\n      const data1 = await response1.json();\n      const data2 = await response2.json();\n\n      // Transform the data for visualization\n      const visualizations = data2.questions.map(question => {\n        const questionResponseData = data1[question.question];\n        return {\n          question: question.question,\n          questionType: question.question_type,\n          data: questionResponseData.map(item => ({\n            name: item._id,\n            value: item.count\n          }))\n        };\n      });\n      setVisualizationData(visualizations);\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  }, [surveyId]);\n  const renderVisualization = (visualization, key) => {\n    switch (visualization.questionType) {\n      case \"multiple_choice\":\n        return /*#__PURE__*/_jsxDEV(MyBarChart, {\n          data: visualization.data\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 16\n        }, this);\n      case \"rating_scale\":\n        return /*#__PURE__*/_jsxDEV(MyHistogram, {\n          data: visualization.data\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 16\n        }, this);\n      // Add other cases as needed\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No visualization available for this question type\"\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Survey Visualizations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), visualizationData.map((visualization, index) => renderVisualization(visualization, index))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(SurveyVisualizations, \"ScuRcMlFrN+9jew1lMOcapUcOWg=\", false, function () {\n  return [useParams];\n});\n_c = SurveyVisualizations;\nexport default SurveyVisualizations;\nvar _c;\n$RefreshReg$(_c, \"SurveyVisualizations\");","map":{"version":3,"names":["React","useState","useEffect","useParams","MyBarChart","MyHistogram","authenticatedFetch","jsxDEV","_jsxDEV","SurveyVisualizations","_s","visualizationData","setVisualizationData","surveyId","Promise","all","then","response1","response2","data1","json","data2","visualizations","questions","map","question","questionResponseData","questionType","question_type","data","item","name","_id","value","count","catch","error","console","renderVisualization","visualization","key","fileName","_jsxFileName","lineNumber","columnNumber","children","className","index","_c","$RefreshReg$"],"sources":["/workspaces/automatic-survey-app/frontend/src/SurveyVisualizations.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport MyBarChart from \"./MyBarChart\";\nimport MyHistogram from \"./MyHistogram\";\nimport authenticatedFetch from \"./authenticatedFetch\";\n\nfunction SurveyVisualizations() {\n  const [visualizationData, setVisualizationData] = useState([]);\n  const { surveyId } = useParams();\n\n  useEffect(() => {\n    Promise.all([\n      authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/survey-responses/${surveyId}/visualize`),\n      authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/retrieve-survey/${surveyId}`)\n    ])\n      .then(async ([response1, response2]) => {\n        const data1 = await response1.json();\n        const data2 = await response2.json();\n\n        // Transform the data for visualization\n        const visualizations = data2.questions.map((question) => {\n          const questionResponseData = data1[question.question];\n          return {\n            question: question.question,\n            questionType: question.question_type,\n            data: questionResponseData.map(item => ({\n              name: item._id,\n              value: item.count\n            }))\n          };\n        });\n\n        setVisualizationData(visualizations);\n      })\n      .catch(error => console.error(\"Error fetching data:\", error));\n  }, [surveyId]);\n\n  const renderVisualization = (visualization, key) => {\n    switch (visualization.questionType) {\n      case \"multiple_choice\":\n        return <MyBarChart key={key} data={visualization.data} />;\n      case \"rating_scale\":\n        return <MyHistogram key={key} data={visualization.data} />;\n      // Add other cases as needed\n      default:\n        return <p key={key}>No visualization available for this question type</p>;\n    }\n  };\n\n  return (\n    <div className=\"p-4 shadow-lg\">\n      <h2 className=\"text-2xl font-bold mb-4\">Survey Visualizations</h2>\n      {visualizationData.map((visualization, index) =>\n        renderVisualization(visualization, index)\n      )}\n    </div>\n  );\n}\n\nexport default SurveyVisualizations;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}