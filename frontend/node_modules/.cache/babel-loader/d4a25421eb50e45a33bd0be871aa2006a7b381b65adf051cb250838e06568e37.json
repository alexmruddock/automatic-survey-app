{"ast":null,"code":"var _jsxFileName = \"/workspaces/automatic-survey-app/frontend/src/SurveyVisualizations.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport MyBarChart from \"./MyBarChart\"; // Import your chart components\nimport authenticatedFetch from \"./authenticatedFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SurveyVisualizations() {\n  _s();\n  const [visualizationData, setVisualizationData] = useState([]);\n  const {\n    surveyId\n  } = useParams();\n  console.log(surveyId);\n  useEffect(() => {\n    Promise.all([authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/survey-responses/${surveyId}/visualize`), authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/retrieve-survey/${surveyId}`)]).then(async ([response1, response2]) => {\n      const response1Text = await response1.text();\n      console.log(\"Response 1:\", response1Text);\n      const response2Text = await response2.text();\n      console.log(\"Response 2:\", response2Text);\n      const aggregatedData = JSON.parse(response1Text);\n      const surveyData = JSON.parse(response2Text);\n      const visualizations = Object.keys(aggregatedData).map(question => {\n        const questionData = surveyData.questions.find(q => q.question === question);\n        return {\n          question,\n          questionType: questionData.question_type,\n          data: aggregatedData[question]\n        };\n      });\n      setVisualizationData(visualizations);\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  }, [surveyId]);\n  const renderVisualization = (visualization, key) => {\n    switch (visualization.questionType) {\n      case \"multiple_choice\":\n        return /*#__PURE__*/_jsxDEV(MyBarChart, {\n          data: visualization.data\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 16\n        }, this);\n      case \"rating_scale\":\n        // Use another chart component here\n        break;\n      // Add other cases as needed\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No visualization available for this question type\"\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Survey Visualizations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), visualizationData.map((visualization, index) => renderVisualization(visualization, index))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(SurveyVisualizations, \"ScuRcMlFrN+9jew1lMOcapUcOWg=\", false, function () {\n  return [useParams];\n});\n_c = SurveyVisualizations;\nexport default SurveyVisualizations;\nvar _c;\n$RefreshReg$(_c, \"SurveyVisualizations\");","map":{"version":3,"names":["React","useState","useEffect","useParams","MyBarChart","authenticatedFetch","jsxDEV","_jsxDEV","SurveyVisualizations","_s","visualizationData","setVisualizationData","surveyId","console","log","Promise","all","then","response1","response2","response1Text","text","response2Text","aggregatedData","JSON","parse","surveyData","visualizations","Object","keys","map","question","questionData","questions","find","q","questionType","question_type","data","catch","error","renderVisualization","visualization","key","fileName","_jsxFileName","lineNumber","columnNumber","children","className","index","_c","$RefreshReg$"],"sources":["/workspaces/automatic-survey-app/frontend/src/SurveyVisualizations.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport MyBarChart from \"./MyBarChart\"; // Import your chart components\nimport authenticatedFetch from \"./authenticatedFetch\";\n\nfunction SurveyVisualizations() {\n  const [visualizationData, setVisualizationData] = useState([]);\n  const { surveyId } = useParams();\n  console.log(surveyId);\n\n  useEffect(() => {\n    Promise.all([\n      authenticatedFetch(\n        `https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/survey-responses/${surveyId}/visualize`\n      ),\n      authenticatedFetch(\n        `https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/retrieve-survey/${surveyId}`\n      ),\n    ])\n      .then(async ([response1, response2]) => {\n        const response1Text = await response1.text();\n        console.log(\"Response 1:\", response1Text);\n        const response2Text = await response2.text();\n        console.log(\"Response 2:\", response2Text);\n\n        const aggregatedData = JSON.parse(response1Text);\n        const surveyData = JSON.parse(response2Text);\n\n        const visualizations = Object.keys(aggregatedData).map((question) => {\n          const questionData = surveyData.questions.find(\n            (q) => q.question === question\n          );\n          return {\n            question,\n            questionType: questionData.question_type,\n            data: aggregatedData[question],\n          };\n        });\n\n        setVisualizationData(visualizations);\n      })\n      .catch((error) => console.error(\"Error fetching data:\", error));\n  }, [surveyId]);\n\n  const renderVisualization = (visualization, key) => {\n    switch (visualization.questionType) {\n      case \"multiple_choice\":\n        return <MyBarChart key={key} data={visualization.data} />;\n      case \"rating_scale\":\n        // Use another chart component here\n        break;\n      // Add other cases as needed\n      default:\n        return (\n          <p key={key}>No visualization available for this question type</p>\n        );\n    }\n  };\n\n  return (\n    <div className=\"p-4 shadow-lg\">\n      <h2 className=\"text-2xl font-bold mb-4\">Survey Visualizations</h2>\n      {visualizationData.map((visualization, index) =>\n        renderVisualization(visualization, index)\n      )}\n    </div>\n  );\n}\n\nexport default SurveyVisualizations;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}