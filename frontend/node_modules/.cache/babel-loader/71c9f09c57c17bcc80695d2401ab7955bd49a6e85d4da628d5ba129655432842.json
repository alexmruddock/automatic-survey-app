{"ast":null,"code":"var _jsxFileName = \"/workspaces/automatic-survey-app/frontend/src/SurveyVisualizations.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport MyBarChart from \"./MyBarChart\"; // Import your chart components\nimport authenticatedFetch from \"./authenticatedFetch\";\nimport MyHistogram from \"./MyHistogram\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SurveyVisualizations() {\n  _s();\n  const [visualizationData, setVisualizationData] = useState([]);\n  const {\n    surveyId\n  } = useParams();\n  console.log(surveyId);\n  useEffect(() => {\n    Promise.all([authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/survey-responses/${surveyId}/visualize`), authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/retrieve-survey/${surveyId}`)]).then(async ([response1, response2]) => {\n      const response1Text = await response1.text();\n      console.log(\"Response 1:\", response1Text);\n      const response2Text = await response2.text();\n      console.log(\"Response 2:\", response2Text);\n      let aggregatedData;\n      let surveyData;\n      try {\n        aggregatedData = JSON.parse(response1Text);\n        surveyData = JSON.parse(response2Text);\n      } catch (error) {\n        console.error(\"Error parsing server response:\", error);\n        return;\n      }\n\n      // Transform the data into the format expected by the chart components\n      const visualizations = Object.keys(aggregatedData).map(question => {\n        // Find the question type for this question\n        const questionData = surveyData.questions.find(q => q.question === question);\n        return {\n          question,\n          questionType: questionData.question_type,\n          data: aggregatedData[question]\n        };\n      });\n\n      // Set the transformed data in state\n      setVisualizationData(visualizations);\n      console.log(\"Visualizations data: \", visualizations);\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  }, [surveyId]);\n  const renderVisualization = (visualization, key) => {\n    // Transform the data for the chart\n    const chartData = visualization.data.map(item => ({\n      name: item._id,\n      // or item.question or another field, depending on your data structure\n      value: item.count // or another field, depending on your data structure\n    }));\n\n    switch (visualization.questionType) {\n      case \"multiple_choice\":\n        return /*#__PURE__*/_jsxDEV(MyBarChart, {\n          data: chartData\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 16\n        }, this);\n      case \"rating_scale\":\n        return /*#__PURE__*/_jsxDEV(MyHistogram, {\n          data: chartD\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 16\n        }, this);\n      // Add other cases as needed\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No visualization available for this question type\"\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Survey Visualizations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), visualizationData.map((visualization, index) => renderVisualization(visualization, index))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(SurveyVisualizations, \"ScuRcMlFrN+9jew1lMOcapUcOWg=\", false, function () {\n  return [useParams];\n});\n_c = SurveyVisualizations;\nexport default SurveyVisualizations;\nvar _c;\n$RefreshReg$(_c, \"SurveyVisualizations\");","map":{"version":3,"names":["React","useState","useEffect","useParams","MyBarChart","authenticatedFetch","MyHistogram","jsxDEV","_jsxDEV","SurveyVisualizations","_s","visualizationData","setVisualizationData","surveyId","console","log","Promise","all","then","response1","response2","response1Text","text","response2Text","aggregatedData","surveyData","JSON","parse","error","visualizations","Object","keys","map","question","questionData","questions","find","q","questionType","question_type","data","catch","renderVisualization","visualization","key","chartData","item","name","_id","value","count","fileName","_jsxFileName","lineNumber","columnNumber","chartD","children","className","index","_c","$RefreshReg$"],"sources":["/workspaces/automatic-survey-app/frontend/src/SurveyVisualizations.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport MyBarChart from \"./MyBarChart\"; // Import your chart components\nimport authenticatedFetch from \"./authenticatedFetch\";\nimport MyHistogram from \"./MyHistogram\";\n\nfunction SurveyVisualizations() {\n  const [visualizationData, setVisualizationData] = useState([]);\n  const { surveyId } = useParams();\n  console.log(surveyId);\n\n  useEffect(() => {\n    Promise.all([\n      authenticatedFetch(\n        `https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/survey-responses/${surveyId}/visualize`\n      ),\n      authenticatedFetch(\n        `https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/retrieve-survey/${surveyId}`\n      ),\n    ])\n      .then(async ([response1, response2]) => {\n        const response1Text = await response1.text();\n        console.log(\"Response 1:\", response1Text);\n        const response2Text = await response2.text();\n        console.log(\"Response 2:\", response2Text);\n\n        let aggregatedData;\n        let surveyData;\n        try {\n          aggregatedData = JSON.parse(response1Text);\n          surveyData = JSON.parse(response2Text);\n        } catch (error) {\n          console.error(\"Error parsing server response:\", error);\n          return;\n        }\n\n        // Transform the data into the format expected by the chart components\n        const visualizations = Object.keys(aggregatedData).map((question) => {\n          // Find the question type for this question\n          const questionData = surveyData.questions.find(\n            (q) => q.question === question\n          );\n          return {\n            question,\n            questionType: questionData.question_type,\n            data: aggregatedData[question],\n          };\n        });\n\n        // Set the transformed data in state\n        setVisualizationData(visualizations);\n        console.log(\"Visualizations data: \", visualizations);\n      })\n      .catch((error) => console.error(\"Error fetching data:\", error));\n  }, [surveyId]);\n\n  const renderVisualization = (visualization, key) => {\n    // Transform the data for the chart\n    const chartData = visualization.data.map((item) => ({\n      name: item._id, // or item.question or another field, depending on your data structure\n      value: item.count, // or another field, depending on your data structure\n    }));\n\n    switch (visualization.questionType) {\n      case \"multiple_choice\":\n        return <MyBarChart key={key} data={chartData} />;\n      case \"rating_scale\":\n        return <MyHistogram key={key} data={chartD} />;\n      // Add other cases as needed\n      default:\n        return (\n          <p key={key}>No visualization available for this question type</p>\n        );\n    }\n  };\n\n  return (\n    <div className=\"p-4 shadow-lg\">\n      <h2 className=\"text-2xl font-bold mb-4\">Survey Visualizations</h2>\n      {visualizationData.map((visualization, index) =>\n        renderVisualization(visualization, index)\n      )}\n    </div>\n  );\n}\n\nexport default SurveyVisualizations;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,UAAU,MAAM,cAAc,CAAC,CAAC;AACvC,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM;IAAEY;EAAS,CAAC,GAAGV,SAAS,CAAC,CAAC;EAChCW,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;EAErBX,SAAS,CAAC,MAAM;IACdc,OAAO,CAACC,GAAG,CAAC,CACVZ,kBAAkB,CACf,gFAA+EQ,QAAS,YAC3F,CAAC,EACDR,kBAAkB,CACf,+EAA8EQ,QAAS,EAC1F,CAAC,CACF,CAAC,CACCK,IAAI,CAAC,OAAO,CAACC,SAAS,EAAEC,SAAS,CAAC,KAAK;MACtC,MAAMC,aAAa,GAAG,MAAMF,SAAS,CAACG,IAAI,CAAC,CAAC;MAC5CR,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEM,aAAa,CAAC;MACzC,MAAME,aAAa,GAAG,MAAMH,SAAS,CAACE,IAAI,CAAC,CAAC;MAC5CR,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEQ,aAAa,CAAC;MAEzC,IAAIC,cAAc;MAClB,IAAIC,UAAU;MACd,IAAI;QACFD,cAAc,GAAGE,IAAI,CAACC,KAAK,CAACN,aAAa,CAAC;QAC1CI,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC;MACxC,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdd,OAAO,CAACc,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtD;MACF;;MAEA;MACA,MAAMC,cAAc,GAAGC,MAAM,CAACC,IAAI,CAACP,cAAc,CAAC,CAACQ,GAAG,CAAEC,QAAQ,IAAK;QACnE;QACA,MAAMC,YAAY,GAAGT,UAAU,CAACU,SAAS,CAACC,IAAI,CAC3CC,CAAC,IAAKA,CAAC,CAACJ,QAAQ,KAAKA,QACxB,CAAC;QACD,OAAO;UACLA,QAAQ;UACRK,YAAY,EAAEJ,YAAY,CAACK,aAAa;UACxCC,IAAI,EAAEhB,cAAc,CAACS,QAAQ;QAC/B,CAAC;MACH,CAAC,CAAC;;MAEF;MACArB,oBAAoB,CAACiB,cAAc,CAAC;MACpCf,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEc,cAAc,CAAC;IACtD,CAAC,CAAC,CACDY,KAAK,CAAEb,KAAK,IAAKd,OAAO,CAACc,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACnE,CAAC,EAAE,CAACf,QAAQ,CAAC,CAAC;EAEd,MAAM6B,mBAAmB,GAAGA,CAACC,aAAa,EAAEC,GAAG,KAAK;IAClD;IACA,MAAMC,SAAS,GAAGF,aAAa,CAACH,IAAI,CAACR,GAAG,CAAEc,IAAI,KAAM;MAClDC,IAAI,EAAED,IAAI,CAACE,GAAG;MAAE;MAChBC,KAAK,EAAEH,IAAI,CAACI,KAAK,CAAE;IACrB,CAAC,CAAC,CAAC;;IAEH,QAAQP,aAAa,CAACL,YAAY;MAChC,KAAK,iBAAiB;QACpB,oBAAO9B,OAAA,CAACJ,UAAU;UAAWoC,IAAI,EAAEK;QAAU,GAArBD,GAAG;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAoB,CAAC;MAClD,KAAK,cAAc;QACjB,oBAAO9C,OAAA,CAACF,WAAW;UAAWkC,IAAI,EAAEe;QAAO,GAAlBX,GAAG;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAiB,CAAC;MAChD;MACA;QACE,oBACE9C,OAAA;UAAAgD,QAAA,EAAa;QAAiD,GAAtDZ,GAAG;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAsD,CAAC;IAExE;EACF,CAAC;EAED,oBACE9C,OAAA;IAAKiD,SAAS,EAAC,eAAe;IAAAD,QAAA,gBAC5BhD,OAAA;MAAIiD,SAAS,EAAC,yBAAyB;MAAAD,QAAA,EAAC;IAAqB;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjE3C,iBAAiB,CAACqB,GAAG,CAAC,CAACW,aAAa,EAAEe,KAAK,KAC1ChB,mBAAmB,CAACC,aAAa,EAAEe,KAAK,CAC1C,CAAC;EAAA;IAAAP,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC5C,EAAA,CA9EQD,oBAAoB;EAAA,QAENN,SAAS;AAAA;AAAAwD,EAAA,GAFvBlD,oBAAoB;AAgF7B,eAAeA,oBAAoB;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}