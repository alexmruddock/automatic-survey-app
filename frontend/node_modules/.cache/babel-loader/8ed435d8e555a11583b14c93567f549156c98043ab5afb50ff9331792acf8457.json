{"ast":null,"code":"var _jsxFileName = \"/workspaces/automatic-survey-app/frontend/src/SurveyVisualizations.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport MyBarChart from \"./MyBarChart\"; // Import your chart components\nimport authenticatedFetch from \"./authenticatedFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SurveyVisualizations() {\n  _s();\n  const [visualizationData, setVisualizationData] = useState([]);\n  const {\n    surveyId\n  } = useParams();\n  useEffect(() => {\n    Promise.all([authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/survey-responses/${surveyId}/visualize`), authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/retrieve-survey/${surveyId}`)]).then(async ([response1, response2]) => {\n      const aggregatedData = await response1.json();\n      const surveyData = await response2.json();\n      const visualizations = Object.keys(aggregatedData).map(question => {\n        const questionData = surveyData.questions.find(q => q.question === question);\n        return {\n          question,\n          questionType: questionData.question_type,\n          data: aggregatedData[question]\n        };\n      });\n      setVisualizationData(visualizations);\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  }, [surveyId]);\n  const renderVisualization = (visualization, key) => {\n    switch (visualization.questionType) {\n      case \"multiple_choice\":\n        return /*#__PURE__*/_jsxDEV(MyBarChart, {\n          data: visualization.data\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 16\n        }, this);\n      case \"rating_scale\":\n        // Use another chart component here\n        break;\n      // Add other cases as needed\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No visualization available for this question type\"\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Survey Visualizations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), visualizationData.map((visualization, index) => renderVisualization(visualization, index))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(SurveyVisualizations, \"ScuRcMlFrN+9jew1lMOcapUcOWg=\", false, function () {\n  return [useParams];\n});\n_c = SurveyVisualizations;\nexport default SurveyVisualizations;\nvar _c;\n$RefreshReg$(_c, \"SurveyVisualizations\");","map":{"version":3,"names":["React","useState","useEffect","useParams","MyBarChart","authenticatedFetch","jsxDEV","_jsxDEV","SurveyVisualizations","_s","visualizationData","setVisualizationData","surveyId","Promise","all","then","response1","response2","aggregatedData","json","surveyData","visualizations","Object","keys","map","question","questionData","questions","find","q","questionType","question_type","data","catch","error","console","renderVisualization","visualization","key","fileName","_jsxFileName","lineNumber","columnNumber","children","className","index","_c","$RefreshReg$"],"sources":["/workspaces/automatic-survey-app/frontend/src/SurveyVisualizations.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport MyBarChart from \"./MyBarChart\"; // Import your chart components\nimport authenticatedFetch from \"./authenticatedFetch\";\n\nfunction SurveyVisualizations() {\n  const [visualizationData, setVisualizationData] = useState([]);\n  const { surveyId } = useParams();\n  \n\n  useEffect(() => {\n    Promise.all([\n      authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/survey-responses/${surveyId}/visualize`),\n      authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/retrieve-survey/${surveyId}`)\n    ])\n    .then(async ([response1, response2]) => {\n      const aggregatedData = await response1.json();\n      const surveyData = await response2.json();\n\n      const visualizations = Object.keys(aggregatedData).map(question => {\n        const questionData = surveyData.questions.find(q => q.question === question);\n        return {\n          question,\n          questionType: questionData.question_type,\n          data: aggregatedData[question]\n        };\n      });\n\n      setVisualizationData(visualizations);\n    })\n    .catch(error => console.error(\"Error fetching data:\", error));\n  }, [surveyId]);\n\n  const renderVisualization = (visualization, key) => {\n    switch (visualization.questionType) {\n      case \"multiple_choice\":\n        return <MyBarChart key={key} data={visualization.data} />;\n      case \"rating_scale\":\n        // Use another chart component here\n        break;\n      // Add other cases as needed\n      default:\n        return <p key={key}>No visualization available for this question type</p>;\n    }\n  };\n\n  return (\n    <div className=\"p-4 shadow-lg\">\n      <h2 className=\"text-2xl font-bold mb-4\">Survey Visualizations</h2>\n      {visualizationData.map((visualization, index) =>\n        renderVisualization(visualization, index)\n      )}\n    </div>\n  );\n}\n\nexport default SurveyVisualizations;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,UAAU,MAAM,cAAc,CAAC,CAAC;AACvC,OAAOC,kBAAkB,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,SAASC,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM;IAAEW;EAAS,CAAC,GAAGT,SAAS,CAAC,CAAC;EAGhCD,SAAS,CAAC,MAAM;IACdW,OAAO,CAACC,GAAG,CAAC,CACVT,kBAAkB,CAAE,gFAA+EO,QAAS,YAAW,CAAC,EACxHP,kBAAkB,CAAE,+EAA8EO,QAAS,EAAC,CAAC,CAC9G,CAAC,CACDG,IAAI,CAAC,OAAO,CAACC,SAAS,EAAEC,SAAS,CAAC,KAAK;MACtC,MAAMC,cAAc,GAAG,MAAMF,SAAS,CAACG,IAAI,CAAC,CAAC;MAC7C,MAAMC,UAAU,GAAG,MAAMH,SAAS,CAACE,IAAI,CAAC,CAAC;MAEzC,MAAME,cAAc,GAAGC,MAAM,CAACC,IAAI,CAACL,cAAc,CAAC,CAACM,GAAG,CAACC,QAAQ,IAAI;QACjE,MAAMC,YAAY,GAAGN,UAAU,CAACO,SAAS,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACJ,QAAQ,KAAKA,QAAQ,CAAC;QAC5E,OAAO;UACLA,QAAQ;UACRK,YAAY,EAAEJ,YAAY,CAACK,aAAa;UACxCC,IAAI,EAAEd,cAAc,CAACO,QAAQ;QAC/B,CAAC;MACH,CAAC,CAAC;MAEFd,oBAAoB,CAACU,cAAc,CAAC;IACtC,CAAC,CAAC,CACDY,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EAC/D,CAAC,EAAE,CAACtB,QAAQ,CAAC,CAAC;EAEd,MAAMwB,mBAAmB,GAAGA,CAACC,aAAa,EAAEC,GAAG,KAAK;IAClD,QAAQD,aAAa,CAACP,YAAY;MAChC,KAAK,iBAAiB;QACpB,oBAAOvB,OAAA,CAACH,UAAU;UAAW4B,IAAI,EAAEK,aAAa,CAACL;QAAK,GAA9BM,GAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA6B,CAAC;MAC3D,KAAK,cAAc;QACjB;QACA;MACF;MACA;QACE,oBAAOnC,OAAA;UAAAoC,QAAA,EAAa;QAAiD,GAAtDL,GAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAsD,CAAC;IAC7E;EACF,CAAC;EAED,oBACEnC,OAAA;IAAKqC,SAAS,EAAC,eAAe;IAAAD,QAAA,gBAC5BpC,OAAA;MAAIqC,SAAS,EAAC,yBAAyB;MAAAD,QAAA,EAAC;IAAqB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjEhC,iBAAiB,CAACc,GAAG,CAAC,CAACa,aAAa,EAAEQ,KAAK,KAC1CT,mBAAmB,CAACC,aAAa,EAAEQ,KAAK,CAC1C,CAAC;EAAA;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACjC,EAAA,CAjDQD,oBAAoB;EAAA,QAENL,SAAS;AAAA;AAAA2C,EAAA,GAFvBtC,oBAAoB;AAmD7B,eAAeA,oBAAoB;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}