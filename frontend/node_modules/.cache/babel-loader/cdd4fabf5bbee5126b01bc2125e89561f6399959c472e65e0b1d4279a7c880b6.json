{"ast":null,"code":"var _jsxFileName = \"/workspaces/automatic-survey-app/frontend/src/CreateSurvey.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport BackButton from \"./BackButton\";\nimport SurveyForm from \"./SurveyForm\";\nimport SurveyDisplay from \"./SurveyDisplay\";\nimport { generateSurvey } from \"./generateSurvey\";\nimport { saveSurvey } from \"./saveSurvey\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateSurvey() {\n  _s();\n  const [survey, setSurvey] = useState(null);\n  const [segments, setSegments] = useState([]); // For storing available segments\n  const [selectedSegments, setSelectedSegments] = useState([]); // For storing selected segment IDs\n  const navigate = useNavigate();\n  const handleGenerate = async surveyData => {\n    console.log(\"Received survey data: \", surveyData);\n    const description = surveyData.description;\n    try {\n      const generatedSurvey = await generateSurvey(description);\n      setSurvey(generatedSurvey);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n  useEffect(() => {\n    // Fetch segments when the component mounts\n    fetch(\"https://yourapi.com/segments\").then(response => response.json()).then(data => setSegments(data)).catch(error => console.error(\"Error fetching segments:\", error));\n  }, []);\n  const handleSegmentChange = selected => {\n    setSelectedSegments(selected); // Update the state with selected segment IDs\n  };\n\n  const handleSave = async () => {\n    try {\n      const savedData = await saveSurvey(survey);\n      console.log(\"Saved Survey: \", savedData);\n\n      // provide user feedback and redirect \n      alert(\"Survey saved successfully!\");\n      navigate('/');\n    } catch (error) {\n      console.error(error.message);\n      alert(\"Error saving survey!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(BackButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SurveyForm, {\n      onSubmit: handleGenerate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SurveyDisplay, {\n      survey: survey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), survey && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      className: \"mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n      children: \"Save Survey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateSurvey, \"QWwKBszuKjpmkw810MdvgHi2HQs=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateSurvey;\nexport default CreateSurvey;\nvar _c;\n$RefreshReg$(_c, \"CreateSurvey\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","BackButton","SurveyForm","SurveyDisplay","generateSurvey","saveSurvey","jsxDEV","_jsxDEV","CreateSurvey","_s","survey","setSurvey","segments","setSegments","selectedSegments","setSelectedSegments","navigate","handleGenerate","surveyData","console","log","description","generatedSurvey","error","message","fetch","then","response","json","data","catch","handleSegmentChange","selected","handleSave","savedData","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","className","onClick","_c","$RefreshReg$"],"sources":["/workspaces/automatic-survey-app/frontend/src/CreateSurvey.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport BackButton from \"./BackButton\";\nimport SurveyForm from \"./SurveyForm\";\nimport SurveyDisplay from \"./SurveyDisplay\";\nimport { generateSurvey } from \"./generateSurvey\";\nimport { saveSurvey } from \"./saveSurvey\";\n\nfunction CreateSurvey() {\n  const [survey, setSurvey] = useState(null);\n  const [segments, setSegments] = useState([]); // For storing available segments\n  const [selectedSegments, setSelectedSegments] = useState([]); // For storing selected segment IDs\n  const navigate = useNavigate();\n\n  const handleGenerate = async (surveyData) => {\n    console.log(\"Received survey data: \", surveyData);\n    const description = surveyData.description;\n    try {\n      const generatedSurvey = await generateSurvey(description);\n      setSurvey(generatedSurvey);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  useEffect(() => {\n    // Fetch segments when the component mounts\n    fetch(\"https://yourapi.com/segments\")\n      .then(response => response.json())\n      .then(data => setSegments(data))\n      .catch(error => console.error(\"Error fetching segments:\", error));\n  }, []);\n\n  const handleSegmentChange = (selected) => {\n    setSelectedSegments(selected); // Update the state with selected segment IDs\n  };\n\n  const handleSave = async () => {\n    try {\n      const savedData = await saveSurvey(survey);\n      console.log(\"Saved Survey: \", savedData);\n\n      // provide user feedback and redirect \n      alert(\"Survey saved successfully!\");\n      navigate('/');\n    } catch (error) {\n      console.error(error.message);\n      alert(\"Error saving survey!\");\n    }\n  };\n\n  return (\n    <div>\n      <BackButton />\n      <SurveyForm onSubmit={handleGenerate} />\n      <div className=\"h-8\"></div>\n      <SurveyDisplay survey={survey} />\n      {survey && (\n        <button\n          onClick={handleSave}\n          className=\"mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n        >\n          Save Survey\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default CreateSurvey;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}