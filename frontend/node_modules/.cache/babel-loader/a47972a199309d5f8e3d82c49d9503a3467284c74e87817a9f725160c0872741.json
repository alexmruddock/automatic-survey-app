{"ast":null,"code":"import authenticatedFetch from './authenticatedFetch';\n\n// Function to call the API for generating an image prompt\nconst generateImagePrompt = async (title, description) => {\n  try {\n    const response = await authenticatedFetch('https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/generate-image-prompt', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: title,\n        description: description\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      return data.prompt;\n    } else {\n      throw new Error('Failed to generate image prompt');\n    }\n  } catch (error) {\n    console.error('Error in generateImagePrompt:', error);\n    throw error;\n  }\n};\n\n// Function to call the API to generate an image based on the prompt\nconst generateImage = async prompt => {\n  try {\n    const response = await authenticatedFetch('https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/generate-image', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        prompt\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      return data.imageUrl;\n    } else {\n      throw new Error('Failed to generate image');\n    }\n  } catch (error) {\n    console.error('Error in generateImage:', error);\n    throw error;\n  }\n};\n\n// Main function to be exported and used in survey creation\nexport const generateSurveyImage = async surveyData => {\n  const prompt = await generateImagePrompt(surveyData);\n  console.log(\"Prompt for DallE-3: \", prompt);\n  const imageUrl = await generateImage(prompt);\n  console.log(imageUrl);\n  return imageUrl;\n};","map":{"version":3,"names":["authenticatedFetch","generateImagePrompt","title","description","response","method","headers","body","JSON","stringify","ok","data","json","prompt","Error","error","console","generateImage","imageUrl","generateSurveyImage","surveyData","log"],"sources":["/workspaces/automatic-survey-app/frontend/src/generateSurveyImage.js"],"sourcesContent":["import authenticatedFetch from './authenticatedFetch';\n\n// Function to call the API for generating an image prompt\nconst generateImagePrompt = async (title, description) => {\n  try {\n    const response = await authenticatedFetch(\n      'https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/generate-image-prompt',\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title: title,\n          description: description\n        })\n      }\n    );\n\n    if (response.ok) {\n      const data = await response.json();\n      return data.prompt;\n    } else {\n      throw new Error('Failed to generate image prompt');\n    }\n  } catch (error) {\n    console.error('Error in generateImagePrompt:', error);\n    throw error;\n  }\n};\n\n// Function to call the API to generate an image based on the prompt\nconst generateImage = async (prompt) => {\n    try {\n        const response = await authenticatedFetch(\n          'https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/generate-image', \n          {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ prompt })\n          }\n        );\n    \n        if (response.ok) {\n          const data = await response.json();\n          return data.imageUrl;\n        } else {\n          throw new Error('Failed to generate image');\n        }\n      } catch (error) {\n        console.error('Error in generateImage:', error);\n        throw error;\n      }\n};\n\n// Main function to be exported and used in survey creation\nexport const generateSurveyImage = async (surveyData) => {\n  const prompt = await generateImagePrompt(surveyData);\n  console.log(\"Prompt for DallE-3: \", prompt);\n  const imageUrl = await generateImage(prompt);\n  console.log(imageUrl);\n  return imageUrl;\n};\n"],"mappings":"AAAA,OAAOA,kBAAkB,MAAM,sBAAsB;;AAErD;AACA,MAAMC,mBAAmB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,WAAW,KAAK;EACxD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,kBAAkB,CACvC,mFAAmF,EACnF;MACEK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBP,KAAK,EAAEA,KAAK;QACZC,WAAW,EAAEA;MACf,CAAC;IACH,CACF,CAAC;IAED,IAAIC,QAAQ,CAACM,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACE,MAAM;IACpB,CAAC,MAAM;MACL,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;IACpD;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAME,aAAa,GAAG,MAAOJ,MAAM,IAAK;EACpC,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAMJ,kBAAkB,CACvC,4EAA4E,EAC5E;MACEK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEI;MAAO,CAAC;IACjC,CACF,CAAC;IAED,IAAIT,QAAQ,CAACM,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACO,QAAQ;IACtB,CAAC,MAAM;MACL,MAAM,IAAIJ,KAAK,CAAC,0BAA0B,CAAC;IAC7C;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACN,CAAC;;AAED;AACA,OAAO,MAAMI,mBAAmB,GAAG,MAAOC,UAAU,IAAK;EACvD,MAAMP,MAAM,GAAG,MAAMZ,mBAAmB,CAACmB,UAAU,CAAC;EACpDJ,OAAO,CAACK,GAAG,CAAC,sBAAsB,EAAER,MAAM,CAAC;EAC3C,MAAMK,QAAQ,GAAG,MAAMD,aAAa,CAACJ,MAAM,CAAC;EAC5CG,OAAO,CAACK,GAAG,CAACH,QAAQ,CAAC;EACrB,OAAOA,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}