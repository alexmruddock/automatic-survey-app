{"ast":null,"code":"var _jsxFileName = \"/workspaces/automatic-survey-app/frontend/src/EditSegment.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport authenticatedFetch from './authenticatedFetch'; // Adjust the path as necessary\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditSegment() {\n  _s();\n  const [segment, setSegment] = useState(null); // State to hold segment data\n  const [loading, setLoading] = useState(true); // State to track data loading\n\n  // Fetch the segment data (adjust URL and method as needed)\n  useEffect(() => {\n    const fetchSegment = async () => {\n      try {\n        const response = await authenticatedFetch(\"https://yourapi.com/segment/123\"); // Replace with actual API call\n        const data = await response.json();\n        setSegment(data);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching segment:\", error);\n        setLoading(false);\n      }\n    };\n    fetchSegment();\n  }, []);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    // Submit updated segment data to the API\n    // Example: authenticatedFetch(\"https://yourapi.com/update-segment\", { method: \"PUT\", body: JSON.stringify(segment) });\n  };\n\n  const handleChange = event => {\n    setSegment({\n      ...segment,\n      [event.target.name]: event.target.value\n    });\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 23\n  }, this);\n  if (!segment) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No segment data found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit Segment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Segment Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          value: segment.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(EditSegment, \"apLqdRYjrNmhVLMrAcqfWAsLJ4s=\");\n_c = EditSegment;\nexport default EditSegment;\nvar _c;\n$RefreshReg$(_c, \"EditSegment\");","map":{"version":3,"names":["React","useState","useEffect","authenticatedFetch","jsxDEV","_jsxDEV","EditSegment","_s","segment","setSegment","loading","setLoading","fetchSegment","response","data","json","error","console","handleSubmit","event","preventDefault","handleChange","target","name","value","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","_c","$RefreshReg$"],"sources":["/workspaces/automatic-survey-app/frontend/src/EditSegment.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport authenticatedFetch from './authenticatedFetch'; // Adjust the path as necessary\n\nfunction EditSegment() {\n  const [segment, setSegment] = useState(null); // State to hold segment data\n  const [loading, setLoading] = useState(true); // State to track data loading\n\n  // Fetch the segment data (adjust URL and method as needed)\n  useEffect(() => {\n    const fetchSegment = async () => {\n      try {\n        const response = await authenticatedFetch(\"https://yourapi.com/segment/123\"); // Replace with actual API call\n        const data = await response.json();\n        setSegment(data);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching segment:\", error);\n        setLoading(false);\n      }\n    };\n\n    fetchSegment();\n  }, []);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    // Submit updated segment data to the API\n    // Example: authenticatedFetch(\"https://yourapi.com/update-segment\", { method: \"PUT\", body: JSON.stringify(segment) });\n  };\n\n  const handleChange = (event) => {\n    setSegment({ ...segment, [event.target.name]: event.target.value });\n  };\n\n  if (loading) return <div>Loading...</div>;\n\n  if (!segment) return <div>No segment data found.</div>;\n\n  return (\n    <div>\n      <h1>Edit Segment</h1>\n      <form onSubmit={handleSubmit}>\n        {/* Form fields to edit segment properties */}\n        <label>\n          Segment Name:\n          <input type=\"text\" name=\"name\" value={segment.name} onChange={handleChange} />\n        </label>\n        {/* Add other fields as needed */}\n        <button type=\"submit\">Save Changes</button>\n      </form>\n    </div>\n  );\n}\n\nexport default EditSegment;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}