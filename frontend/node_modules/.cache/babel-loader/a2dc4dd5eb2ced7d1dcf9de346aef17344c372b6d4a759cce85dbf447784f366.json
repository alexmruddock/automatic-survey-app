{"ast":null,"code":"var _jsxFileName = \"/workspaces/automatic-survey-app/frontend/src/SurveyVisualizations.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport MyBarChart from \"./MyBarChart\"; // Import your chart components\nimport authenticatedFetch from \"./authenticatedFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SurveyVisualizations() {\n  _s();\n  const [aggregatedData, setAggregatedData] = useState([]);\n  const {\n    surveyId\n  } = useParams();\n  useEffect(() => {\n    Promise.all([authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/survey-responses/${surveyId}/visualize`), authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/retrieve-survey/:surveyId${surveyId}`)]).then(async ([response1, response2]) => {\n      const data1 = await response1.json();\n      const data2 = await response2.json();\n\n      // Merge the question_type from the survey data into the aggregatedData\n      const mergedData = data1.aggregatedData.map((item, index) => ({\n        ...item,\n        questionType: data2.questions[index].question_type\n      }));\n      setAggregatedData(mergedData);\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  }, [surveyId]);\n\n  // Function to select and render the appropriate visualization component\n  const renderVisualization = (data, questionType, key) => {\n    switch (questionType) {\n      case \"multiple_choice\":\n        return /*#__PURE__*/_jsxDEV(MyBarChart, {\n          data: data\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 16\n        }, this);\n      case \"rating_scale\":\n        return /*#__PURE__*/_jsxDEV(MyBarChart, {\n          data: data\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 16\n        }, this);\n      // Assuming you have a LineChart component\n      // Add other cases as needed\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No visualization available for this question type\"\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Survey Visualizations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), Array.isArray(aggregatedData) && aggregatedData.map((data, index) => renderVisualization(data, data.questionType, index) // Assuming data includes questionType\n    )]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(SurveyVisualizations, \"7Bg7yvh7i2dxhVkkzUG+u/Sw5Qw=\", false, function () {\n  return [useParams];\n});\n_c = SurveyVisualizations;\nexport default SurveyVisualizations;\nvar _c;\n$RefreshReg$(_c, \"SurveyVisualizations\");","map":{"version":3,"names":["React","useState","useEffect","useParams","MyBarChart","authenticatedFetch","jsxDEV","_jsxDEV","SurveyVisualizations","_s","aggregatedData","setAggregatedData","surveyId","Promise","all","then","response1","response2","data1","json","data2","mergedData","map","item","index","questionType","questions","question_type","catch","error","console","renderVisualization","data","key","fileName","_jsxFileName","lineNumber","columnNumber","children","className","Array","isArray","_c","$RefreshReg$"],"sources":["/workspaces/automatic-survey-app/frontend/src/SurveyVisualizations.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport MyBarChart from \"./MyBarChart\"; // Import your chart components\nimport authenticatedFetch from \"./authenticatedFetch\";\n\nfunction SurveyVisualizations() {\n  const [aggregatedData, setAggregatedData] = useState([]);\n  const { surveyId } = useParams();\n\n  useEffect(() => {\n    Promise.all([\n      authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/survey-responses/${surveyId}/visualize`),\n      authenticatedFetch(`https://vigilant-orbit-v6x6pp4w99636w9v-3000.app.github.dev/retrieve-survey/:surveyId${surveyId}`)\n    ])\n      .then(async([response1, response2]) => {\n        const data1 = await response1.json();\n        const data2 = await response2.json();\n  \n        // Merge the question_type from the survey data into the aggregatedData\n        const mergedData = data1.aggregatedData.map((item, index) => ({\n          ...item,\n          questionType: data2.questions[index].question_type\n        }));\n  \n        setAggregatedData(mergedData);\n      })\n      .catch((error) =>\n        console.error(\"Error fetching data:\", error)\n      );\n  }, [surveyId]);\n\n  // Function to select and render the appropriate visualization component\n  const renderVisualization = (data, questionType, key) => {\n    switch (questionType) {\n      case \"multiple_choice\":\n        return <MyBarChart key={key} data={data} />;\n      case \"rating_scale\":\n        return <MyBarChart key={key} data={data} />; // Assuming you have a LineChart component\n      // Add other cases as needed\n      default:\n        return (\n          <p key={key}>No visualization available for this question type</p>\n        );\n    }\n  };\n\n  return (\n    <div className=\"p-4 shadow-lg\">\n      <h2 className=\"text-2xl font-bold mb-4\">Survey Visualizations</h2>\n      {Array.isArray(aggregatedData) &&\n        aggregatedData.map((data, index) =>\n          renderVisualization(data, data.questionType, index) // Assuming data includes questionType\n        )}\n    </div>\n  );\n}\n\nexport default SurveyVisualizations;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}